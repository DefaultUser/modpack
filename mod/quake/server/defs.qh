#pragma once

.bool damagedbycontents;

int intermission_running;

bool autocvar_sv_eventlog;
int autocvar_sv_eventlog_files_counter; // TODO

.int playerid;

void GameLogEcho(string s);

float skill;

#define bprintf(...) bprint(sprintf(__VA_ARGS__))

.float t_width;
.float t_length;

.string map;

.int swim_flag;
.bool jump_flag;

.string deathtype;
.string(entity this) deathmessage;

.float height;

.float show_hostile;

.int walkframe;

.vector pos1, pos2;

.float search_time;

.entity trigger_field;

.string noise4;

.vector dest1, dest2;

void set_anim(entity this, int frm, void(entity) tnk);

.float air_finished;

.entity movetarget;

.vector mangle;

.int count;

.float dmg;

bool gameover;

.float pausetime;

.float invincible_finished;
.float invisible_finished;
.float super_damage_finished;
.float radsuit_finished;

.float invincible_time, invincible_sound;
.float invisible_time, invisible_sound;
.float super_time, super_sound;
.float rad_time;
.float fly_sound;

.float pain_finished;

.string mdl;

.int aflag;

.int worldtype;

.bool axhitme;

.float		waitmin, waitmax;
.float		distance;
.float		volume;

.int attack_state;
const int AS_STRAIGHT = 1;
const int AS_SLIDING = 2;
const int AS_MELEE = 3;
const int AS_MISSILE = 4;

.float lefty;

.entity oldenemy;

.void(entity this) th_stand;
.void(entity this) th_walk;
.void(entity this) th_run;
.void(entity this) th_missile;
.void(entity this) th_melee;
.void(entity this, entity attacker, float damage) th_pain;
.void(entity this, entity attacker) th_die;

string current_cdtrack;

float sys_frametime;     // gets initialised in worldspawn, saves the value from autocvar_sys_ticrate

float servertime, serverprevtime, serverframetime;

.int prevweapon;

const int SPAWNFLAG_SUPERSPIKE = BIT(0);
const int SPAWNFLAG_LASER = BIT(1);

//.float		new_weapon;
//.float		new_items;
//.float ammo_shells1, ammo_nails1, ammo_rockets1, ammo_cells1;
.float ammo_lava_nails;
.float ammo_multi_rockets;
.float ammo_plasma;
.float gravity;

// rogue globals!
float 	earthquake_active;
float	earthquake_intensity;
float	cutscene_running;
entity  tag_token_owner;

.float		shield_finished, antigrav_finished;
.float		shield_time, antigrav_time;
.entity		shield_entity;

//
// elevator fields
//

.float 		elevatorLastUse;
.float		elevatorOnFloor;
.float		elevatorToFloor;
.vector		elevatorDestination; 

//
// plat2 fields
//
.float		plat2Called;
.float		plat2LastMove;
.float		plat2GoTime;
.float		plat2GoTo;

//
// new AI fields
//
.float		orbitPosition;

//
// dragon specific fields
// 
.float playerInRoom;
.float playerInTransit;
.float dragonInRoom;
.float dragonInTransit;
.float dragonAttacking;
.float dragonPainSequence;
.vector dragonLastVelocity;

//
// Other Rogue Fields
//
.float		AGping;
.float		childrenSpawned;
.float		ltrailLastUsed;
.float		shield_death_time;
.float		shieldSoundTime;
.float		dragonDeathState;

.float		tag_frags;
.float		tag_message_time;

//
// dmatch.qc
//
void tag_token_respawn();
void tag_token_touch(entity this, entity toucher);
void tag_token_drop();

// sphere.qc
void sphere_remove(entity this);

// protocol bytes
const int SVC_UPDATESTAT		= 3;		// pgm black magic
const int SVC_CUTSCENE		    = 34;

.int weapons;


// intrusive lists

IntrusiveList g_damagedbycontents;
STATIC_INIT(g_damagedbycontents) { g_damagedbycontents = IL_NEW(); }
